---
import fg from 'fast-glob';
import fs from 'fs';
import siteConfig from '../../data/site-config';
import ImageGrid from '../../components/ImageGrid.astro';
import { ImageGridWithSorting } from '../../components/ImageGridWithSorting';
import BaseLayout from '../../layouts/BaseLayout.astro';
import PageHeader from '../../components/PageHeader.astro';
import GoBack from '../../components/GoBack.astro';
import { extractFileName } from '../../utils/common-utils';

// export const prerender = true;
export function getStaticPaths() {
  return [
    { params: { slug: 'pregnancy' } },
    { params: { slug: 'temp' } },
    { params: { slug: 'newborn' } },
    { params: { slug: 'family' } },
    { params: { slug: 'woman' } },
  ];
}

const { slug } = Astro.params; // Get the slug from the URL
const devMode = siteConfig.devMode;

const removePublicFromPath = (src: string): string => `/${src.split('public/')[1]}`;

const readJsonFile = (src: string): string[] => {
  // e.g. src = '/images/portfolio/newborn/a/sort.json'
  try {
    const content = fs.readFileSync(`public${src}`, 'utf-8'); // Synchronously read the file
    const result = JSON.parse(content); // Parse the JSON content
    // console.log(`@@ read json`, result);
    return Array.isArray(result) ? result : [];
  } catch (_e) {
    return [];
  }
};

/*
takes images ready from the folder
reads sort.json
any images missing in sort.json are added to the top of the array
 */
const combineImagesWithSortJson =
  (sortFiles: string[]) =>
  (key: string, images: string[]): string[] => {
    // sortFiles = ['/images/portfolio/newborn/a/sort.json,...]
    // key = '/images/portfolio/newborn/a'
    const sortFileToCheck = `${key}/sort.json`;
    if (sortFiles.includes(sortFileToCheck)) {
      const sortedImages = readJsonFile(sortFileToCheck).map((image) => `${key}/${image}`);
      const sortedImagesSet = new Set(sortedImages);
      const missingImages = images.filter((image) => !sortedImagesSet.has(image));
      // filter out files in sortedImages which do not exist in images
      const imagesSet = new Set(images);
      const sortedImagesFiltered = sortedImages.filter((sortedImage) => imagesSet.has(sortedImage));
      return missingImages.concat(sortedImagesFiltered);
    } else {
      // no sort file
      // console.log(`@@ combineImagesWithSortJson :: return images as is`);
      return images;
    }
  };

const path = `public/images/portfolio/${slug}/**/*.{jpg,JPG}`;
const ignore = `public/images/portfolio/${slug}/_*/**`;

const allImages: string[] = fg.sync(path, { onlyFiles: true, ignore: [ignore] });
const allSortFiles: string[] = fg.sync(`public/images/portfolio/${slug}/**/sort.json`, { onlyFiles: true }).map(removePublicFromPath);

// key - folder, e.g. '/images/portfolio/pregnancy/b1'
// value - array of images in that folder, e.g. ['/images/portfolio/pregnancy/b1/1234.jpg', ...]
type Accumulator = Record<string, string[]>;
const reduceByFolders = (acc: Accumulator, image: string): Accumulator => {
  const split = image.split('/');
  split.pop();
  const key = split.join('/');
  if (Array.isArray(acc[key])) {
    acc[key].push(image);
  } else {
    // console.log(`@@ key`, key);
    acc[key] = [image];
  }
  return acc;
};

const objOfImages = allImages.map(removePublicFromPath).reverse().reduce(reduceByFolders, {});
// console.log(`@@ all sort.json files`, allSortFiles);
// console.log(`@@ images`, objOfImages);
const combineImages = combineImagesWithSortJson(allSortFiles);
Object.keys(objOfImages).forEach((key) => {
  objOfImages[key] = combineImages(key, objOfImages[key]);
});
// console.log(`@@ images 2`, objOfImages);

// e.g. ['a', 'b', c']
const folders = Object.keys(objOfImages).map(extractFileName);

const title = siteConfig.dictionaries.title[slug] || 'temp';
---

<BaseLayout description={siteConfig.description} image={siteConfig.image} showHeader={false}>
  <PageHeader title={title} />
  <GoBack text={siteConfig.dictionaries.title.portfolio} href={siteConfig.dictionaries.href.portfolio} />

  {
    devMode ? (
      <>
        <div id="folders" class="fixed top-10 left-0 w-auto h-auto bg-gray-100 p-4 z-10 flex flex-col opacity-0 hover:opacity-100 rounded-br-lg rounded-tr-lg">
          <input class="w-6 h-6" id="stickyFolders" type="checkbox" onclick="" />
          <div class="mt-6 flex-grow overflow-y-auto flex flex-col gap-8 h-[calc(100vh-8rem)]">
            {folders.map((folder) => (
              <a class="font-bold" href={`#${folder}`}>
                {folder}
              </a>
            ))}
          </div>
        </div>
        {Object.keys(objOfImages)
          .sort()
          .reverse()
          .map((key) => {
            const folder = extractFileName(key);
            return (
              <section id={folder} class="even:bg-blue-300">
                <ImageGridWithSorting images={objOfImages[key]} client:load />
              </section>
            );
          })}
      </>
    ) : (
      Object.keys(objOfImages)
        .sort()
        .reverse()
        .map((key) => <ImageGrid images={objOfImages[key]} />)
    )
  }

  <GoBack text={siteConfig.dictionaries.title.portfolio} href={siteConfig.dictionaries.href.portfolio} />
</BaseLayout>

<script src="../../scripts/portfolio-folder-sidebar.js"></script>
